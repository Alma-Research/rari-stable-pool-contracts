{
  "contractName": "Operation",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            }
          ],
          "internalType": "struct Account.Info[]",
          "name": "accounts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum Actions.ActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "accountId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "sign",
                  "type": "bool"
                },
                {
                  "internalType": "enum Types.AssetDenomination",
                  "name": "denomination",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Types.AssetReference",
                  "name": "ref",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Types.AssetAmount",
              "name": "amount",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "primaryMarketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryMarketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "otherAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "otherAccountId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Actions.ActionArgs[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "operate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info[]\",\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum Actions.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"accountId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"enum Types.AssetDenomination\",\"name\":\"denomination\",\"type\":\"uint8\"},{\"internalType\":\"enum Types.AssetReference\",\"name\":\"ref\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.AssetAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"primaryMarketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryMarketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"otherAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"otherAccountId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Actions.ActionArgs[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"operate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"dYdX  * Primary public function for allowing users and contracts to manage accounts within Solo\",\"methods\":{\"operate((address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[])\":{\"params\":{\"accounts\":\"A list of all accounts that will be used in this operation. Cannot contain                  duplicates. In each action, the relevant account will be referred-to by its                  index in the list.\",\"actions\":\"An ordered list of all actions that will be taken in this operation. The                  actions will be processed in order.\"}}},\"title\":\"Operation\"},\"userdoc\":{\"methods\":{\"operate((address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[])\":{\"notice\":\"The main entry-point to Solo that allows users and contracts to manage accounts. Take one or more actions on one or more accounts. The msg.sender must be the owner or operator of all accounts except for those being liquidated, vaporized, or traded with. One call to operate() is considered a singular \\\"operation\\\". Account collateralization is ensured only after the completion of the entire operation. \"}}}},\"settings\":{\"compilationTarget\":{\"/home/david/rari-contracts-v1.2.0/contracts/external/dydx/Operation.sol\":\"Operation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/david/rari-contracts-v1.2.0/contracts/external/dydx/Operation.sol\":{\"keccak256\":\"0x679036ca898bc5516b8f63f44c07fbe8ebe3ce233eb215a2b1c4c4a6d502786a\",\"urls\":[\"bzz-raw://fd63c5daf3333935f1444ce5c4c671c6faa8e4106cd96b14b6309a6116b5d3a2\",\"dweb:/ipfs/QmWunGGWG3QNMcUMxnjU2kfkrSYdA3T2vsJPnuYtYqQbVj\"]},\"/home/david/rari-contracts-v1.2.0/contracts/external/dydx/lib/Account.sol\":{\"keccak256\":\"0x835464a7d38af8c8825e933589db0c4287b838b268126069309bcfb308f87c12\",\"urls\":[\"bzz-raw://bf42139cc2a5fd9b453942a919374c3286dda133faf4716e18f172eef6bccc5c\",\"dweb:/ipfs/QmVdKxBkkANe9dYPBUUDkNXZsYETyXnsJcRG2kyDChgqsJ\"]},\"/home/david/rari-contracts-v1.2.0/contracts/external/dydx/lib/Actions.sol\":{\"keccak256\":\"0xc4cd95970a4bb457f0c821c5e80d69460a62aff68f0eb409b7a1cb7a7b08401b\",\"urls\":[\"bzz-raw://c4ac4146b7622bb33b2c47329ceef7db27b469695e14073cf4c1351f2e932ef8\",\"dweb:/ipfs/QmRpHWeAFBcjfdPGeq3PoufmQ2TQmN4iKuCBzcRJJbLx3A\"]},\"/home/david/rari-contracts-v1.2.0/contracts/external/dydx/lib/Types.sol\":{\"keccak256\":\"0x69e8b86b4fce20739c4fd65c8285388c099e8c9580e25652c72d8bade4df7a31\",\"urls\":[\"bzz-raw://cfdf9c9956f8b22e3084d780d331d6f8ae75d57cf058a55a2391a206e8d2e2e6\",\"dweb:/ipfs/QmVe4D9DXdAepZaCP3bx6WECQZU5NwFiko6VAPzi59MD8X\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity ^0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { Account } from \"./lib/Account.sol\";\r\nimport { Actions } from \"./lib/Actions.sol\";\r\n\r\n\r\n/**\r\n * @title Operation\r\n * @author dYdX\r\n *\r\n * Primary public function for allowing users and contracts to manage accounts within Solo\r\n */\r\ncontract Operation {\r\n    /**\r\n     * The main entry-point to Solo that allows users and contracts to manage accounts.\r\n     * Take one or more actions on one or more accounts. The msg.sender must be the owner or\r\n     * operator of all accounts except for those being liquidated, vaporized, or traded with.\r\n     * One call to operate() is considered a singular \"operation\". Account collateralization is\r\n     * ensured only after the completion of the entire operation.\r\n     *\r\n     * @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\r\n     *                   duplicates. In each action, the relevant account will be referred-to by its\r\n     *                   index in the list.\r\n     * @param  actions   An ordered list of all actions that will be taken in this operation. The\r\n     *                   actions will be processed in order.\r\n     */\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    )\r\n        public;\r\n}\r\n",
  "sourcePath": "/home/david/rari-contracts-v1.2.0/contracts/external/dydx/Operation.sol",
  "ast": {
    "absolutePath": "/home/david/rari-contracts-v1.2.0/contracts/external/dydx/Operation.sol",
    "exportedSymbols": {
      "Operation": [
        5000
      ]
    },
    "id": 5001,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4985,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "621:23:10"
      },
      {
        "id": 4986,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "646:33:10"
      },
      {
        "absolutePath": "/home/david/rari-contracts-v1.2.0/contracts/external/dydx/lib/Account.sol",
        "file": "./lib/Account.sol",
        "id": 4988,
        "nodeType": "ImportDirective",
        "scope": 5001,
        "sourceUnit": 5022,
        "src": "683:44:10",
        "symbolAliases": [
          {
            "foreign": 4987,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/david/rari-contracts-v1.2.0/contracts/external/dydx/lib/Actions.sol",
        "file": "./lib/Actions.sol",
        "id": 4990,
        "nodeType": "ImportDirective",
        "scope": 5001,
        "sourceUnit": 5055,
        "src": "729:44:10",
        "symbolAliases": [
          {
            "foreign": 4989,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Operation\n@author dYdX\n\n * Primary public function for allowing users and contracts to manage accounts within Solo",
        "fullyImplemented": false,
        "id": 5000,
        "linearizedBaseContracts": [
          5000
        ],
        "name": "Operation",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "The main entry-point to Solo that allows users and contracts to manage accounts.\nTake one or more actions on one or more accounts. The msg.sender must be the owner or\noperator of all accounts except for those being liquidated, vaporized, or traded with.\nOne call to operate() is considered a singular \"operation\". Account collateralization is\nensured only after the completion of the entire operation.\n\n     * @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\n                  duplicates. In each action, the relevant account will be referred-to by its\n                  index in the list.\n@param  actions   An ordered list of all actions that will be taken in this operation. The\n                  actions will be processed in order.",
            "id": 4999,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4997,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4993,
                  "name": "accounts",
                  "nodeType": "VariableDeclaration",
                  "scope": 4999,
                  "src": "1853:30:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Info_$5020_memory_$dyn_memory_ptr",
                    "typeString": "struct Account.Info[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 4991,
                      "name": "Account.Info",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 5020,
                      "src": "1853:12:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Info_$5020_storage_ptr",
                        "typeString": "struct Account.Info"
                      }
                    },
                    "id": 4992,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1853:14:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Info_$5020_storage_$dyn_storage_ptr",
                      "typeString": "struct Account.Info[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4996,
                  "name": "actions",
                  "nodeType": "VariableDeclaration",
                  "scope": 4999,
                  "src": "1894:35:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_ActionArgs_$5053_memory_$dyn_memory_ptr",
                    "typeString": "struct Actions.ActionArgs[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 4994,
                      "name": "Actions.ActionArgs",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 5053,
                      "src": "1894:18:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ActionArgs_$5053_storage_ptr",
                        "typeString": "struct Actions.ActionArgs"
                      }
                    },
                    "id": 4995,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1894:20:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_ActionArgs_$5053_storage_$dyn_storage_ptr",
                      "typeString": "struct Actions.ActionArgs[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1842:94:10"
            },
            "returnParameters": {
              "id": 4998,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1952:0:10"
            },
            "scope": 5000,
            "src": "1826:127:10",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 5001,
        "src": "923:1033:10"
      }
    ],
    "src": "621:1337:10"
  },
  "legacyAST": {
    "absolutePath": "/home/david/rari-contracts-v1.2.0/contracts/external/dydx/Operation.sol",
    "exportedSymbols": {
      "Operation": [
        5000
      ]
    },
    "id": 5001,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4985,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "621:23:10"
      },
      {
        "id": 4986,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "646:33:10"
      },
      {
        "absolutePath": "/home/david/rari-contracts-v1.2.0/contracts/external/dydx/lib/Account.sol",
        "file": "./lib/Account.sol",
        "id": 4988,
        "nodeType": "ImportDirective",
        "scope": 5001,
        "sourceUnit": 5022,
        "src": "683:44:10",
        "symbolAliases": [
          {
            "foreign": 4987,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/david/rari-contracts-v1.2.0/contracts/external/dydx/lib/Actions.sol",
        "file": "./lib/Actions.sol",
        "id": 4990,
        "nodeType": "ImportDirective",
        "scope": 5001,
        "sourceUnit": 5055,
        "src": "729:44:10",
        "symbolAliases": [
          {
            "foreign": 4989,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Operation\n@author dYdX\n\n * Primary public function for allowing users and contracts to manage accounts within Solo",
        "fullyImplemented": false,
        "id": 5000,
        "linearizedBaseContracts": [
          5000
        ],
        "name": "Operation",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "The main entry-point to Solo that allows users and contracts to manage accounts.\nTake one or more actions on one or more accounts. The msg.sender must be the owner or\noperator of all accounts except for those being liquidated, vaporized, or traded with.\nOne call to operate() is considered a singular \"operation\". Account collateralization is\nensured only after the completion of the entire operation.\n\n     * @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\n                  duplicates. In each action, the relevant account will be referred-to by its\n                  index in the list.\n@param  actions   An ordered list of all actions that will be taken in this operation. The\n                  actions will be processed in order.",
            "id": 4999,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4997,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4993,
                  "name": "accounts",
                  "nodeType": "VariableDeclaration",
                  "scope": 4999,
                  "src": "1853:30:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Info_$5020_memory_$dyn_memory_ptr",
                    "typeString": "struct Account.Info[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 4991,
                      "name": "Account.Info",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 5020,
                      "src": "1853:12:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Info_$5020_storage_ptr",
                        "typeString": "struct Account.Info"
                      }
                    },
                    "id": 4992,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1853:14:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Info_$5020_storage_$dyn_storage_ptr",
                      "typeString": "struct Account.Info[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4996,
                  "name": "actions",
                  "nodeType": "VariableDeclaration",
                  "scope": 4999,
                  "src": "1894:35:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_ActionArgs_$5053_memory_$dyn_memory_ptr",
                    "typeString": "struct Actions.ActionArgs[]"
                  },
                  "typeName": {
                    "baseType": {
                      "contractScope": null,
                      "id": 4994,
                      "name": "Actions.ActionArgs",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 5053,
                      "src": "1894:18:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ActionArgs_$5053_storage_ptr",
                        "typeString": "struct Actions.ActionArgs"
                      }
                    },
                    "id": 4995,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1894:20:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_ActionArgs_$5053_storage_$dyn_storage_ptr",
                      "typeString": "struct Actions.ActionArgs[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1842:94:10"
            },
            "returnParameters": {
              "id": 4998,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1952:0:10"
            },
            "scope": 5000,
            "src": "1826:127:10",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 5001,
        "src": "923:1033:10"
      }
    ],
    "src": "621:1337:10"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.2",
  "updatedAt": "2020-07-20T17:13:58.196Z",
  "devdoc": {
    "author": "dYdX  * Primary public function for allowing users and contracts to manage accounts within Solo",
    "methods": {
      "operate((address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[])": {
        "params": {
          "accounts": "A list of all accounts that will be used in this operation. Cannot contain                  duplicates. In each action, the relevant account will be referred-to by its                  index in the list.",
          "actions": "An ordered list of all actions that will be taken in this operation. The                  actions will be processed in order."
        }
      }
    },
    "title": "Operation"
  },
  "userdoc": {
    "methods": {
      "operate((address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[])": {
        "notice": "The main entry-point to Solo that allows users and contracts to manage accounts. Take one or more actions on one or more accounts. The msg.sender must be the owner or operator of all accounts except for those being liquidated, vaporized, or traded with. One call to operate() is considered a singular \"operation\". Account collateralization is ensured only after the completion of the entire operation. "
      }
    }
  }
}