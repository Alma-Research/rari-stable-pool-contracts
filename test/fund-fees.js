const erc20Abi = require('./abi/ERC20.json');

const currencies = require('./fixtures/currencies.json');
const pools = require('./fixtures/pools.json');

const RariFundManager = artifacts.require("RariFundManager");
const RariFundToken = artifacts.require("RariFundToken");

// These tests expect the owner and the fund rebalancer of RariFundManager to be set to accounts[0]
contract("RariFundManager v0.3.0", accounts => {
  it("should deposit to pools, set the interest fee rate, wait for interest, set the master beneficiary of interest fees, and claim interest fees", async () => {
    let fundManagerInstance = await RariFundManager.deployed();
    
    // Approve and deposit tokens to the fund (using DAI as an example)
    var amountBN = web3.utils.toBN(10 ** (currencies["DAI"].decimals - 1));
    var erc20Contract = new web3.eth.Contract(erc20Abi, currencies["DAI"].tokenAddress);
    await erc20Contract.methods.approve(RariFundManager.address, amountBN.toString()).send({ from: accounts[0] });
    await fundManagerInstance.deposit("DAI", amountBN, { from: accounts[0] });

    // Approve and deposit to pool (using Compound as an example)
    await fundManagerInstance.approveToPool(1, "DAI", amountBN, { from: accounts[0] });
    await fundManagerInstance.depositToPool(1, "DAI", amountBN, { from: accounts[0] });

    // Set interest fee rate
    fundManagerInstance.setInterestFeeRate(web3.utils.toBN(1e17), { from: accounts[0] });

    // Check interest fee rate
    let interestFeeRate = await fundManagerInstance.getInterestFeeRate.call();
    assert(interestFeeRate.eq(web3.utils.toBN(1e17)));

    // Check initial raw interest accrued and interest fees generated
    let initialRawInterestAccrued = await fundManagerInstance.getRawInterestAccrued.call("DAI");
    let initialInterestFeesGenerated = await fundManagerInstance.getInterestFeesGenerated.call("DAI");

    // Wait for interest
    // TODO: Actually wait for interest and time out after x minutes
    await new Promise(resolve => setTimeout(resolve, 5 * 60 * 1000));
    
    // Check raw interest accrued
    let nowRawInterestAccrued = await fundManagerInstance.getRawInterestAccrued.call("DAI");
    console.log(initialRawInterestAccrued, nowRawInterestAccrued);
    assert(nowRawInterestAccrued.gt(initialRawInterestAccrued));

    // Check interest fees generated
    // TODO: Exactly calculate expected fees generated (and remove multiplication of expected fees generated by 0.99)
    let nowInterestFeesGenerated = await fundManagerInstance.getInterestFeesGenerated.call("DAI");
    assert(nowInterestFeesGenerated.gte(initialInterestFeesGenerated.add(nowRawInterestAccrued.sub(initialRawInterestAccrued).div(10).mul(99).div(100))));

    // Set the master beneficiary of interest fees
    await fundManagerInstance.setInterestFeeMasterBeneficiary(accounts[1]);

    // TODO: Check _interestFeeMasterBeneficiary (no way to do this as of now)

    // Check initial account balance
    var erc20Contract = new web3.eth.Contract(erc20Abi, currencies["DAI"].tokenAddress);
    let myOldBalance = erc20Contract.balanceOf(accounts[1]).call();

    // Claim fees!
    await fundManagerInstance.claimFees("DAI", accounts[1]);

    // Check that we claimed fees
    // TODO: Exactly calculate expected fees generated (and remove multiplication of expected fees generated by 0.99)
    let myNewBalance = await erc20Contract.balanceOf(accounts[1]).call();
    assert(myNewBalance.gte(myOldBalance.add(nowInterestFeesGenerated.sub(initialInterestFeesGenerated).mul(99).div(100))));

    // Reset master beneficiary of interest fees
    await fundManagerInstance.setInterestFeeMasterBeneficiary(accounts[0]);
  });
});
